# Makefile para Servidor de An√°lisis de Exposici√≥n de Datos
# Versi√≥n: 2.0 - Edici√≥n Revelada (Espa√±ol)

# Variables
IMAGE_NAME = cybersec-demo
CONTAINER_NAME = cybersec-demo-es
PORT = 5000
VERSION = latest

# Colores para output
GREEN = \033[0;32m
YELLOW = \033[1;33m
RED = \033[0;31m
NC = \033[0m # No Color

.PHONY: help build run stop clean logs health test dev prod

# Mostrar ayuda por defecto
help:
	@echo "${GREEN}üïµÔ∏è Servidor de An√°lisis de Exposici√≥n de Datos - Docker${NC}"
	@echo "${YELLOW}Comandos disponibles:${NC}"
	@echo "  ${GREEN}build${NC}     - Construir imagen Docker"
	@echo "  ${GREEN}run${NC}       - Ejecutar contenedor"
	@echo "  ${GREEN}stop${NC}      - Detener contenedor"
	@echo "  ${GREEN}restart${NC}   - Reiniciar contenedor"
	@echo "  ${GREEN}logs${NC}      - Ver logs del contenedor"
	@echo "  ${GREEN}health${NC}    - Verificar salud del contenedor"
	@echo "  ${GREEN}clean${NC}     - Limpiar contenedores e im√°genes"
	@echo "  ${GREEN}test${NC}      - Probar endpoints"
	@echo "  ${GREEN}dev${NC}       - Ejecutar en modo desarrollo"
	@echo "  ${GREEN}prod${NC}      - Ejecutar en modo producci√≥n"
	@echo "  ${GREEN}compose-up${NC}   - Usar Docker Compose"
	@echo "  ${GREEN}compose-down${NC} - Detener Docker Compose"

# Construir imagen Docker
build:
	@echo "${GREEN}üî® Construyendo imagen Docker...${NC}"
	docker build -t $(IMAGE_NAME):$(VERSION) .
	@echo "${GREEN}‚úÖ Imagen construida: $(IMAGE_NAME):$(VERSION)${NC}"

# Ejecutar contenedor
run: build
	@echo "${GREEN}üöÄ Ejecutando contenedor...${NC}"
	@docker stop $(CONTAINER_NAME) 2>/dev/null || true
	@docker rm $(CONTAINER_NAME) 2>/dev/null || true
	docker run -d \
		--name $(CONTAINER_NAME) \
		-p $(PORT):5000 \
		--restart unless-stopped \
		$(IMAGE_NAME):$(VERSION)
	@echo "${GREEN}‚úÖ Contenedor ejecut√°ndose en http://localhost:$(PORT)${NC}"

# Detener contenedor
stop:
	@echo "${YELLOW}‚èπÔ∏è Deteniendo contenedor...${NC}"
	@docker stop $(CONTAINER_NAME) 2>/dev/null || echo "${RED}Contenedor no est√° ejecut√°ndose${NC}"

# Reiniciar contenedor
restart: stop run

# Ver logs
logs:
	@echo "${GREEN}üìã Logs del contenedor:${NC}"
	docker logs -f $(CONTAINER_NAME)

# Verificar salud
health:
	@echo "${GREEN}üè• Verificando salud del contenedor...${NC}"
	@if docker ps | grep -q $(CONTAINER_NAME); then \
		echo "${GREEN}‚úÖ Contenedor ejecut√°ndose${NC}"; \
		curl -f http://localhost:$(PORT)/salud && echo "\n${GREEN}‚úÖ Endpoint de salud OK${NC}" || echo "${RED}‚ùå Endpoint de salud FALLO${NC}"; \
	else \
		echo "${RED}‚ùå Contenedor no est√° ejecut√°ndose${NC}"; \
	fi

# Limpiar contenedores e im√°genes
clean:
	@echo "${YELLOW}üßπ Limpiando contenedores e im√°genes...${NC}"
	@docker stop $(CONTAINER_NAME) 2>/dev/null || true
	@docker rm $(CONTAINER_NAME) 2>/dev/null || true
	@docker rmi $(IMAGE_NAME):$(VERSION) 2>/dev/null || true
	@docker system prune -f
	@echo "${GREEN}‚úÖ Limpieza completada${NC}"

# Probar endpoints principales
test:
	@echo "${GREEN}üß™ Probando endpoints...${NC}"
	@echo "Probando endpoint de salud..."
	@curl -s http://localhost:$(PORT)/salud | jq . || echo "${RED}‚ùå /salud fall√≥${NC}"
	@echo "\nProbando endpoint principal..."
	@curl -s -o /dev/null -w "%{http_code}" http://localhost:$(PORT)/ && echo " ${GREEN}‚úÖ / OK${NC}" || echo "${RED}‚ùå / fall√≥${NC}"
	@echo "\nProbando endpoint de consejos..."
	@curl -s -o /dev/null -w "%{http_code}" http://localhost:$(PORT)/consejos-privacidad && echo " ${GREEN}‚úÖ /consejos-privacidad OK${NC}" || echo "${RED}‚ùå /consejos-privacidad fall√≥${NC}"

# Modo desarrollo
dev:
	@echo "${GREEN}üîß Ejecutando en modo desarrollo...${NC}"
	@docker stop $(CONTAINER_NAME) 2>/dev/null || true
	@docker rm $(CONTAINER_NAME) 2>/dev/null || true
	docker run -d \
		--name $(CONTAINER_NAME) \
		-p $(PORT):5000 \
		-e FLASK_ENV=development \
		-e FLASK_DEBUG=1 \
		$(IMAGE_NAME):$(VERSION)
	@echo "${GREEN}‚úÖ Contenedor en modo desarrollo: http://localhost:$(PORT)${NC}"

# Modo producci√≥n
prod:
	@echo "${GREEN}üè≠ Ejecutando en modo producci√≥n...${NC}"
	@docker stop $(CONTAINER_NAME) 2>/dev/null || true
	@docker rm $(CONTAINER_NAME) 2>/dev/null || true
	docker run -d \
		--name $(CONTAINER_NAME) \
		-p $(PORT):5000 \
		-e FLASK_ENV=production \
		-e FLASK_DEBUG=0 \
		--restart unless-stopped \
		$(IMAGE_NAME):$(VERSION)
	@echo "${GREEN}‚úÖ Contenedor en modo producci√≥n: http://localhost:$(PORT)${NC}"

# Docker Compose - Iniciar
compose-up:
	@echo "${GREEN}üê≥ Iniciando con Docker Compose...${NC}"
	docker-compose up --build -d
	@echo "${GREEN}‚úÖ Servicios iniciados con Docker Compose${NC}"

# Docker Compose - Detener
compose-down:
	@echo "${YELLOW}üê≥ Deteniendo Docker Compose...${NC}"
	docker-compose down
	@echo "${GREEN}‚úÖ Servicios detenidos${NC}"

# Informaci√≥n del contenedor
info:
	@echo "${GREEN}üìä Informaci√≥n del contenedor:${NC}"
	@docker ps | grep $(CONTAINER_NAME) || echo "${RED}Contenedor no ejecut√°ndose${NC}"
	@echo "\n${GREEN}üìà Uso de recursos:${NC}"
	@docker stats $(CONTAINER_NAME) --no-stream 2>/dev/null || echo "${RED}Estad√≠sticas no disponibles${NC}"

# Abrir shell en el contenedor
shell:
	@echo "${GREEN}üêö Abriendo shell en el contenedor...${NC}"
	docker exec -it $(CONTAINER_NAME) /bin/bash

# Mostrar puertos
ports:
	@echo "${GREEN}üîå Puertos expuestos:${NC}"
	@docker port $(CONTAINER_NAME) 2>/dev/null || echo "${RED}Contenedor no ejecut√°ndose${NC}"
